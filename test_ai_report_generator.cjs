require('dotenv').config({ path: '.env.local' });

const fetch = require('node-fetch');

const BACKEND_URL = 'http://localhost:3002';

async function testarAIReportGenerator() {
  console.log('üß™ Testando AIReportGenerator...\n');

  // Verificar se o servidor est√° rodando
  try {
    const healthResponse = await fetch(`${BACKEND_URL}/api/health`);
    if (!healthResponse.ok) {
      console.error('‚ùå Servidor n√£o est√° rodando. Execute "npm run dev" primeiro.');
      return;
    }
    console.log('‚úÖ Servidor est√° rodando\n');
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o servidor:', error.message);
    console.log('Certifique-se de que o servidor est√° rodando com "npm run dev"');
    return;
  }

  // Testar gera√ß√£o de relat√≥rio com dados completos
  console.log('üìã Testando gera√ß√£o de relat√≥rio com dados completos...\n');

  const dadosProcessoCompleto = {
    numeroProcesso: "2024/001",
    numeroDespacho: "001/2024",
    dataDespacho: "15/01/2024",
    origemProcesso: "Comunica√ß√£o de Ocorr√™ncia",
    dataFato: "10/01/2024",
    vitimas: [{ nome: "Jo√£o Silva", idade: 25 }],
    investigados: [
      {
        nome: "Sgt. Jos√© Santos",
        matricula: "12345",
        dataAdmissao: "01/01/2010",
        unidade: "1¬∫ BPM"
      }
    ],
    descricaoFatos: "Policial militar, durante o servi√ßo, foi flagrado subtraindo R$ 500,00 da sala de evid√™ncias. O fato foi presenciado por testemunha que confirmou a subtra√ß√£o do valor. Documentos foram apreendidos corroborando a ocorr√™ncia.",
    statusFuncional: "militar de servi√ßo",
    diligenciasRealizadas: {
      "Oitiva de testemunhas": { realizada: true, observacao: "Testemunha confirmou o fato" },
      "Apreens√£o de documentos": { realizada: true, observacao: "Documentos apreendidos" },
      "Oitiva do investigado": { realizada: true, observacao: "Investigado foi ouvido" }
    },
    numeroSigpad: "SIGPAD-2024-001",
    documentos: ["Termo de apreens√£o", "Relat√≥rio de ocorr√™ncia", "Ficha funcional"],
    tipoCrime: "Furto",
    crimesSelecionados: ["Furto", "Peculato"],
    transgressao: "Desonra",
    modusOperandi: "Subtra√ß√£o de valores da sala de evid√™ncias",
    redistribuicao: "N√£o aplic√°vel",
    sugestoes: "Instaurar SAD"
  };

  try {
    const response = await fetch(`${BACKEND_URL}/api/openai/gerar-relatorio`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ dadosProcesso: dadosProcessoCompleto }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro na gera√ß√£o de relat√≥rio:', errorText);
      return;
    }

    const resultado = await response.text();
    
    console.log('‚úÖ RELAT√ìRIO GERADO COM DADOS COMPLETOS:');
    console.log('üìä Dados enviados para IA:');
    console.log(JSON.stringify(dadosProcessoCompleto, null, 2));
    console.log('\nüìÑ Relat√≥rio gerado:');
    console.log(resultado);
    console.log('\n' + '='.repeat(80) + '\n');

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o de relat√≥rio:', error.message);
  }

  // Testar gera√ß√£o de relat√≥rio com dados m√≠nimos
  console.log('üìã Testando gera√ß√£o de relat√≥rio com dados m√≠nimos...\n');

  const dadosProcessoMinimo = {
    numeroProcesso: "2024/002",
    descricaoFatos: "Policial militar, de folga, em briga de bar, agrediu fisicamente um civil causando les√£o corporal",
    statusFuncional: "militar de folga",
    dataFato: "20/01/2024"
  };

  try {
    const response = await fetch(`${BACKEND_URL}/api/openai/gerar-relatorio`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ dadosProcesso: dadosProcessoMinimo }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro na gera√ß√£o de relat√≥rio:', errorText);
      return;
    }

    const resultado = await response.text();
    
    console.log('‚úÖ RELAT√ìRIO GERADO COM DADOS M√çNIMOS:');
    console.log('üìä Dados enviados para IA:');
    console.log(JSON.stringify(dadosProcessoMinimo, null, 2));
    console.log('\nüìÑ Relat√≥rio gerado:');
    console.log(resultado);
    console.log('\n' + '='.repeat(80) + '\n');

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o de relat√≥rio:', error.message);
  }

  console.log('üéâ Testes do AIReportGenerator conclu√≠dos!');
  console.log('\nüìù RESUMO:');
  console.log('‚úÖ Servidor funcionando');
  console.log('‚úÖ Gera√ß√£o de relat√≥rio com dados completos');
  console.log('‚úÖ Gera√ß√£o de relat√≥rio com dados m√≠nimos');
  console.log('‚úÖ IA processando todos os campos fornecidos');
}

testarAIReportGenerator().catch(console.error); 