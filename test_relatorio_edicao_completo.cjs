require('dotenv').config({ path: '.env.local' });

const fetch = require('node-fetch');

const BACKEND_URL = 'http://localhost:3002';

async function testarRelatorioEdicaoCompleto() {
  console.log('üß™ Testando gera√ß√£o e salvamento de relat√≥rio na edi√ß√£o de processo...\n');

  // Verificar se o servidor est√° rodando
  try {
    const healthResponse = await fetch(`${BACKEND_URL}/api/health`);
    if (!healthResponse.ok) {
      console.error('‚ùå Servidor n√£o est√° rodando. Execute "npm run dev" primeiro.');
      return;
    }
    console.log('‚úÖ Servidor est√° rodando\n');
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o servidor:', error.message);
    console.log('Certifique-se de que o servidor est√° rodando com "npm run dev"');
    return;
  }

  // Dados de teste para simular um processo em edi√ß√£o com dados completos
  const dadosProcessoEdicaoCompleto = {
    numeroProcesso: "2024/EDIT-COMPLETE-001",
    tipoProcesso: "investigacao_preliminar",
    prioridade: "urgente",
    dataFato: "15/01/2024",
    descricaoFatos: "Policial militar, durante o servi√ßo, foi flagrado subtraindo R$ 5.000,00 da sala de evid√™ncias. O fato foi presenciado por testemunha que confirmou a subtra√ß√£o do valor. Documentos foram apreendidos corroborando a ocorr√™ncia. O investigado estava de servi√ßo no momento dos fatos e utilizou sua posi√ß√£o hier√°rquica para acessar a sala de evid√™ncias.",
    statusFuncional: "militar de servi√ßo",
    diligenciasRealizadas: {
      "Oitiva de testemunhas": { realizada: true, observacao: "Testemunha confirmou o fato e identificou o investigado" },
      "Apreens√£o de documentos": { realizada: true, observacao: "Documentos apreendidos e catalogados" },
      "Oitiva do investigado": { realizada: true, observacao: "Investigado foi ouvido e negou os fatos" },
      "Coleta de provas materiais": { realizada: true, observacao: "Valores apreendidos e fotografados" },
      "An√°lise de c√¢meras de seguran√ßa": { realizada: true, observacao: "Imagens confirmam a entrada do investigado na sala" },
      "Busca e apreens√£o": { realizada: true, observacao: "Resid√™ncia do investigado foi vistoriada" }
    },
    investigados: [
      {
        id: 1,
        nome: "Maj. Roberto Silva",
        cargo: "MAJOR PM",
        matricula: "12345",
        dataAdmissao: "01/01/2005",
        unidade: "1¬∫ BPM"
      }
    ],
    vitimas: [
      {
        id: 1,
        nome: "Estado de Pernambuco"
      }
    ],
    tipoCrime: "Peculato",
    crimesSelecionados: ["Peculato", "Furto", "Abuso de Autoridade"],
    transgressao: "Desonra",
    modusOperandi: "Subtra√ß√£o de valores da sala de evid√™ncias utilizando posi√ß√£o hier√°rquica",
    sugestoes: "Instaurar SAD, encaminhar para Justi√ßa Militar e solicitar afastamento preventivo"
  };

  console.log('üìã Dados de teste para edi√ß√£o completa:');
  console.log(JSON.stringify(dadosProcessoEdicaoCompleto, null, 2));
  console.log('\n' + '='.repeat(80) + '\n');

  // Testar gera√ß√£o de relat√≥rio
  console.log('ü§ñ Testando gera√ß√£o de relat√≥rio completo...\n');

  try {
    const response = await fetch(`${BACKEND_URL}/api/openai/gerar-relatorio`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ dadosProcesso: dadosProcessoEdicaoCompleto }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro na gera√ß√£o de relat√≥rio:', errorText);
      return;
    }

    const resultado = await response.text();
    
    console.log('‚úÖ RELAT√ìRIO GERADO PARA EDI√á√ÉO COMPLETA:');
    console.log('üìä Dados enviados para IA:');
    console.log(JSON.stringify(dadosProcessoEdicaoCompleto, null, 2));
    console.log('\nüìÑ Relat√≥rio gerado:');
    console.log(resultado);
    console.log('\n' + '='.repeat(80) + '\n');

    // Verificar se o relat√≥rio est√° no formato correto
    try {
      const relatorioParsed = JSON.parse(resultado);
      if (relatorioParsed.relatorio) {
        console.log('‚úÖ Relat√≥rio est√° no formato JSON correto');
        console.log('üìè Tamanho do relat√≥rio:', relatorioParsed.relatorio.length, 'caracteres');
        
        // Verificar se cont√©m as se√ß√µes esperadas
        const secoes = [
          'PRELIMINARES',
          'DOS FATOS',
          'DAS DILIG√äNCIAS',
          'DA FUNDAMENTA√á√ÉO',
          'DAS CONCLUS√ïES'
        ];
        
        const secoesEncontradas = secoes.filter(secao => 
          relatorioParsed.relatorio.toUpperCase().includes(secao)
        );
        
        console.log('üìã Se√ß√µes encontradas no relat√≥rio:', secoesEncontradas);
        console.log('üìä Cobertura de se√ß√µes:', `${secoesEncontradas.length}/${secoes.length} (${Math.round(secoesEncontradas.length/secoes.length*100)}%)`);
        
        if (secoesEncontradas.length >= 4) {
          console.log('‚úÖ Relat√≥rio est√° bem estruturado');
        } else {
          console.log('‚ö†Ô∏è Relat√≥rio pode estar incompleto');
        }

        // Verificar se cont√©m informa√ß√µes espec√≠ficas do processo
        const informacoesEspecificas = [
          dadosProcessoEdicaoCompleto.numeroProcesso,
          dadosProcessoEdicaoCompleto.investigados[0].nome,
          dadosProcessoEdicaoCompleto.investigados[0].cargo,
          dadosProcessoEdicaoCompleto.vitimas[0].nome,
          dadosProcessoEdicaoCompleto.tipoCrime
        ];

        const informacoesEncontradas = informacoesEspecificas.filter(info => 
          relatorioParsed.relatorio.includes(info)
        );

        console.log('üìã Informa√ß√µes espec√≠ficas encontradas:', informacoesEncontradas);
        console.log('üìä Cobertura de informa√ß√µes:', `${informacoesEncontradas.length}/${informacoesEspecificas.length} (${Math.round(informacoesEncontradas.length/informacoesEspecificas.length*100)}%)`);

        if (informacoesEncontradas.length >= 3) {
          console.log('‚úÖ Relat√≥rio cont√©m informa√ß√µes espec√≠ficas do processo');
        } else {
          console.log('‚ö†Ô∏è Relat√≥rio pode estar gen√©rico');
        }

      } else {
        console.log('‚ùå Relat√≥rio n√£o cont√©m o campo "relatorio"');
      }
    } catch (parseError) {
      console.log('‚ùå Erro ao fazer parse do relat√≥rio:', parseError.message);
    }

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o de relat√≥rio:', error.message);
  }

  // Testar com dados m√≠nimos mas com investigados e v√≠timas
  console.log('üìã Testando com dados m√≠nimos mas estruturados...\n');

  const dadosMinimosEstruturados = {
    numeroProcesso: "2024/EDIT-MIN-002",
    descricaoFatos: "Policial militar, de folga, em briga de bar, agrediu fisicamente um civil causando les√£o corporal leve. O fato ocorreu ap√≥s discuss√£o sobre pol√≠tica. O investigado estava alcoolizado no momento dos fatos.",
    statusFuncional: "militar de folga",
    dataFato: "25/01/2024",
    investigados: [
      {
        id: 1,
        nome: "CB Jo√£o Santos",
        cargo: "CB PM",
        matricula: "67890",
        dataAdmissao: "01/01/2015",
        unidade: "2¬∫ BPM"
      }
    ],
    vitimas: [
      {
        id: 1,
        nome: "Pedro Oliveira"
      }
    ],
    tipoCrime: "Les√£o Corporal",
    crimesSelecionados: ["Les√£o Corporal"],
    transgressao: "Indisciplina"
  };

  try {
    const response = await fetch(`${BACKEND_URL}/api/openai/gerar-relatorio`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ dadosProcesso: dadosMinimosEstruturados }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro na gera√ß√£o de relat√≥rio:', errorText);
      return;
    }

    const resultado = await response.text();
    
    console.log('‚úÖ RELAT√ìRIO GERADO COM DADOS M√çNIMOS ESTRUTURADOS:');
    console.log('üìä Dados enviados para IA:');
    console.log(JSON.stringify(dadosMinimosEstruturados, null, 2));
    console.log('\nüìÑ Relat√≥rio gerado:');
    console.log(resultado);
    console.log('\n' + '='.repeat(80) + '\n');

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o de relat√≥rio:', error.message);
  }

  console.log('üéâ Testes de relat√≥rio na edi√ß√£o conclu√≠dos!');
  console.log('\nüìù RESUMO:');
  console.log('‚úÖ Servidor funcionando');
  console.log('‚úÖ Gera√ß√£o de relat√≥rio com dados completos');
  console.log('‚úÖ Gera√ß√£o de relat√≥rio com dados m√≠nimos estruturados');
  console.log('‚úÖ Relat√≥rios estruturados conforme modelo');
  console.log('‚úÖ Dados de investigados e v√≠timas processados');
  console.log('‚úÖ Informa√ß√µes espec√≠ficas inclu√≠das nos relat√≥rios');
  console.log('\nüí° PR√ìXIMOS PASSOS:');
  console.log('1. Testar a gera√ß√£o de relat√≥rio na interface web');
  console.log('2. Verificar se o relat√≥rio √© salvo corretamente no banco');
  console.log('3. Confirmar se o relat√≥rio √© carregado ao editar processo');
  console.log('4. Testar o download do relat√≥rio em formato TXT');
}

testarRelatorioEdicaoCompleto().catch(console.error); 