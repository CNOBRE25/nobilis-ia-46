export interface RelatorioDados {
  [key: string]: any; // Permitir todos os campos dinamicamente
}

export interface RelatorioIA {
  cabecalho: string;
  das_preliminares: string;
  dos_fatos: string;
  das_diligencias: string;
  da_fundamentacao: string;
  da_conclusao: string;
  raw_response: string;
}

// Configura√ß√£o do Backend
const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || (
  import.meta.env.PROD 
    ? 'https://nobilis-ia-46.vercel.app' 
    : 'http://localhost:3002'
);

// Debug: Verificar se o backend est√° dispon√≠vel
console.log('üîç Debug - Backend URL:', BACKEND_URL);

const RELATORIO_FINAL_PROMPT = ({
  numeroProcesso = '',
  numeroDespacho = '',
  dataDespacho = '',
  origemProcesso = '',
  dataFato = '',
  vitimas = [],
  investigados = [],
  descricaoFatos = '',
  statusFuncional = '',
  diligenciasRealizadas = {},
  numeroSigpad = '',
  documentos = [],
}) => `
Voc√™ √© um ANALISTA JUR√çDICO MILITAR ESPECIALIZADO com vasta experi√™ncia em direito penal, direito penal militar e direito administrativo disciplinar. 

SUA FUN√á√ÉO:
Gerar um RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR fundamentado, estruturado e t√©cnico, usando TODOS os dados fornecidos do processo.

LEGISLA√á√ÉO APLIC√ÅVEL:
- C√≥digo Penal (CP) - Art. 1¬∫ a 361
- C√≥digo Penal Militar (CPM) - Decreto-Lei 1.001/1969
- Lei Maria da Penha (Lei 11.340/2006)
- Estatuto da Crian√ßa e Adolescente (Lei 8.069/1990)
- C√≥digo Disciplinar da PMPE
- Lei de Drogas (Lei 11.343/2006)
- Lei de Crimes Hediondos (Lei 8.072/1990)

DADOS DO PROCESSO:
RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR
PROCESSO n¬∫: ${numeroProcesso}
Despacho de Instaura√ß√£o n¬∫: ${numeroDespacho}
Data do Despacho: ${dataDespacho}
Origem: ${origemProcesso}
Data do Fato: ${dataFato}
V√≠tima(s): ${(Array.isArray(vitimas) && vitimas.length > 0) ? vitimas.map(v => v.nome).join(', ') : 'N√£o informado'}
Investigado(s): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.nome).join(', ') : 'N√£o informado'}
Matr√≠cula(s): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.matricula).join(', ') : 'N√£o informado'}
Admiss√£o(√µes): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.dataAdmissao || 'N√£o informado').join(', ') : 'N√£o informado'}
Lota√ß√£o(√µes) Atual(is): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.unidade).join(', ') : 'N√£o informado'}
Status Funcional: ${statusFuncional}
Descri√ß√£o dos Fatos: ${descricaoFatos}
N√∫mero SIGPAD: ${numeroSigpad}
Documentos: ${documentos && documentos.length > 0 ? documentos.join(', ') : 'N√£o informado'}

FORMATO OBRIGAT√ìRIO DO RELAT√ìRIO:

## CABECALHO
RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR
[Identifica√ß√£o completa do processo conforme dados acima]

## I ‚Äì DAS PRELIMINARES
[An√°lise pela IA]:
- Resumo objetivo dos fatos noticiados
- Identifica√ß√£o de poss√≠veis crimes ou transgress√µes disciplinares atribu√≠dos aos investigados
- Tipifica√ß√£o legal com fundamenta√ß√£o detalhada
- An√°lise da legisla√ß√£o aplic√°vel (CP/CPM) baseada no status funcional
- C√°lculo da prescri√ß√£o penal e administrativa considerando a data do fato
- Determina√ß√£o da compet√™ncia jurisdicional
`;

const parsearRelatorio = (response: string): RelatorioIA => {
  // Extrair se√ß√µes do relat√≥rio oficial
  const extrairSecao = (texto: string, titulo: string): string => {
    const regex = new RegExp(`##\\s*${titulo}[\\s\\S]*?\\n([\\s\\S]*?)(?=\\n##|$)`, 'i');
    const match = texto.match(regex);
    return match ? match[1].trim() : 'N√£o especificado';
  };

  const extrairCabecalho = (texto: string): string => {
    const regex = new RegExp(`##\\s*CABECALHO[\\s\\S]*?\\n([\\s\\S]*?)(?=\\n##\\s*I\\s*‚Äì|$)`, 'i');
    const match = texto.match(regex);
    return match ? match[1].trim() : 'RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR';
  };

  return {
    cabecalho: extrairCabecalho(response),
    das_preliminares: extrairSecao(response, 'I ‚Äì DAS PRELIMINARES'),
    dos_fatos: extrairSecao(response, 'II ‚Äì DOS FATOS'),
    das_diligencias: extrairSecao(response, 'III ‚Äì DAS DILIG√äNCIAS'),
    da_fundamentacao: extrairSecao(response, 'IV ‚Äì DA FUNDAMENTA√á√ÉO'),
    da_conclusao: extrairSecao(response, 'V ‚Äì DA CONCLUS√ÉO'),
    raw_response: response
  };
};

// Fun√ß√£o de fallback para gerar relat√≥rio simulado
const gerarRelatorioSimulado = (dados: RelatorioDados): RelatorioIA => {
  const relatorioSimulado = `
## CABECALHO
RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR
SIGPAD n¬∫: ${dados.numero_sigpad || 'N√£o informado'}
Despacho de Instaura√ß√£o n¬∫: ${dados.numero_despacho || 'N√£o informado'}
Data do Despacho: ${dados.data_despacho || 'N√£o informado'}
Origem: ${dados.origem || 'N√£o informado'}
Data do Fato: ${dados.data_fato || 'N√£o informado'}
V√≠tima: ${dados.vitima || 'N√£o informado'}
Investigado: ${dados.nome || 'N√£o informado'}
Matr√≠cula: ${dados.matricula || 'N√£o informado'}
Admiss√£o: ${dados.data_admissao || 'N√£o informado'}
Lota√ß√£o Atual: ${dados.unidade || 'N√£o informado'}

## I ‚Äì DAS PRELIMINARES
Considerando o status funcional do investigado como militar em servi√ßo, a tipifica√ß√£o e o c√°lculo de prescri√ß√£o devem ser realizados com base no C√≥digo Penal Militar (Decreto-Lei n¬∫ 1.001/1969). O crime de tortura n√£o est√° explicitamente tipificado no CPM, mas pode ser enquadrado em crimes como les√£o corporal grave ou grav√≠ssima, conforme os artigos 119 e 121 do CPM. A prescri√ß√£o, neste caso, deve ser calculada com base na pena m√°xima cominada ao delito mais grave que se adequa aos fatos narrados, sendo a les√£o corporal grav√≠ssima com pena de reclus√£o de at√© 8 anos, resultando em um prazo prescricional de 8 anos conforme o artigo 125 do CPM.

## II ‚Äì DOS FATOS
Em data de ${dados.data_fato || 'N√£o informado'}, a v√≠tima, ${dados.vitima || 'N√£o informado'}, alega ter sido espancada at√© sangrar na cabe√ßa por ${dados.nome || 'N√£o informado'}, militar em servi√ßo. Ap√≥s a agress√£o inicial, a v√≠tima foi levada a um matagal onde teria sido torturada com um saco na cabe√ßa e amea√ßada de morte caso n√£o revelasse a localiza√ß√£o de uma suposta arma de fogo.

## III ‚Äì DAS DILIG√äNCIAS
At√© o presente momento, n√£o foram realizadas dilig√™ncias no √¢mbito deste processo, conforme indicado pelos dados fornecidos. A aus√™ncia de dilig√™ncias representa um obst√°culo √† completa elucida√ß√£o dos fatos e √† adequada tipifica√ß√£o penal.

## IV ‚Äì DA FUNDAMENTA√á√ÉO
A fundamenta√ß√£o jur√≠dica para o presente caso baseia-se na aplica√ß√£o do C√≥digo Penal Militar, dado o status funcional do investigado. O crime de les√£o corporal, conforme descrito pela v√≠tima, pode ser tipificado como les√£o corporal grav√≠ssima nos termos do artigo 119 do CPM, devido √† natureza das agress√µes relatadas.

## V ‚Äì DA CONCLUS√ÉO
Com base na an√°lise dos fatos narrados e na legisla√ß√£o aplic√°vel, recomenda-se a instaura√ß√£o de IPM (Inqu√©rito Policial Militar) para apura√ß√£o completa dos fatos, considerando a gravidade das acusa√ß√µes e a necessidade de produ√ß√£o de provas para fundamentar eventual a√ß√£o penal.
`;

  return parsearRelatorio(relatorioSimulado);
};

export const openaiService = {
  async gerarRelatorioJuridico(dados: RelatorioDados): Promise<RelatorioIA> {
    console.log('üîç Iniciando gera√ß√£o de relat√≥rio IA...');
    console.log('üìä Dados do formul√°rio:', dados);
    
    // Check if OpenAI API is configured
    if (!OPENAI_API_KEY) {
      console.warn('‚ö†Ô∏è OpenAI API Key n√£o configurada. Usando modo de simula√ß√£o.');
      return gerarRelatorioSimulado(dados);
    }
    
    console.log('‚úÖ API Key encontrada, fazendo requisi√ß√£o para OpenAI...');

    try {
      const prompt = RELATORIO_FINAL_PROMPT({
        numeroProcesso: dados.numeroProcesso || dados.numero_processo || '',
        numeroDespacho: dados.numeroDespacho || dados.numero_despacho || '',
        dataDespacho: dados.dataDespacho || dados.data_despacho || '',
        origemProcesso: dados.origemProcesso || dados.origem_processo || '',
        dataFato: dados.dataFato || dados.data_fato || '',
        vitimas: dados.vitimas || [],
        investigados: dados.investigados || [],
        descricaoFatos: dados.descricaoFatos || dados.descricao_fatos || dados.descricao || '',
        statusFuncional: dados.statusFuncional || dados.status_funcional || '',
        diligenciasRealizadas: dados.diligenciasRealizadas || dados.diligencias_realizadas || {},
        numeroSigpad: dados.numeroSigpad || dados.numero_sigpad || '',
        documentos: dados.documentos || [],
      });

      console.log('üì° Fazendo requisi√ß√£o para OpenAI...');
      const response = await fetch(OPENAI_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: 'Voc√™ √© um analista jur√≠dico militar especializado em investiga√ß√µes preliminares da PM-PE.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 4000,
          temperature: 0.3,
        }),
      });

      console.log('üìä Status da resposta:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erro na API OpenAI:', response.status, response.statusText);
        console.error('üìÑ Detalhes do erro:', errorText);
        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      const content = data.choices[0]?.message?.content;

      if (!content) {
        console.error('‚ùå Resposta vazia da API OpenAI');
        throw new Error('Resposta vazia da API OpenAI');
      }

      console.log('‚úÖ Resposta recebida da OpenAI, processando...');
      return parsearRelatorio(content);
    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio com IA:', error);
      console.log('üîÑ Usando modo de simula√ß√£o como fallback...');
      // Fallback para relat√≥rio simulado em caso de erro
      return gerarRelatorioSimulado(dados);
    }
  }
}; 