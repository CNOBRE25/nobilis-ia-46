export interface RelatorioDados {
  [key: string]: any; // Permitir todos os campos dinamicamente
}

export interface RelatorioIA {
  cabecalho: string;
  das_preliminares: string;
  dos_fatos: string;
  das_diligencias: string;
  da_fundamentacao: string;
  da_conclusao: string;
  raw_response: string;
}

// Configura√ß√£o do Backend
const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || (
  import.meta.env.PROD 
    ? 'https://nobilis-ia-46.vercel.app' 
    : 'http://localhost:3002'
);

// Debug: Verificar se o backend est√° dispon√≠vel
console.log('üîç Debug - Backend URL:', BACKEND_URL);

const RELATORIO_FINAL_PROMPT = ({
  numeroProcesso = '',
  numeroDespacho = '',
  dataDespacho = '',
  origemProcesso = '',
  dataFato = '',
  vitimas = [],
  investigados = [],
  descricaoFatos = '',
  statusFuncional = '',
  diligenciasRealizadas = {},
  numeroSigpad = '',
  documentos = [],
}) => `
Voc√™ √© um ANALISTA JUR√çDICO MILITAR ESPECIALIZADO. Gere um RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR fundamentado, estruturado conforme o modelo abaixo, usando todos os dados fornecidos do processo:

RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR
PROCESSO n¬∫: ${numeroProcesso}
Despacho de Instaura√ß√£o n¬∫: ${numeroDespacho}
Data do Despacho: ${dataDespacho}
Origem: ${origemProcesso}
Data do Fato: ${dataFato}
V√≠tima(s): ${(Array.isArray(vitimas) && vitimas.length > 0) ? vitimas.map(v => v.nome).join(', ') : 'N√£o informado'}
Investigado(s): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.nome).join(', ') : 'N√£o informado'}
Matr√≠cula(s): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.matricula).join(', ') : 'N√£o informado'}
Admiss√£o(√µes): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.dataAdmissao || 'N√£o informado').join(', ') : 'N√£o informado'}
Lota√ß√£o(√µes) Atual(is): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.unidade).join(', ') : 'N√£o informado'}

I ‚Äì DAS PRELIMINARES
[An√°lise pela IA]:
Elabore um resumo objetivo dos fatos noticiados, identifique poss√≠veis crimes ou transgress√µes disciplinares atribu√≠dos aos investigados, com tipifica√ß√£o legal, considerando o status funcional do(s) agente(s) no momento do fato. aplique a legisla√ß√£o adequada (CPM, CP, Estatuto, C√≥digo Disciplinar, etc.), analise a natureza da infra√ß√£o e, com base na data do fato, realize o c√°lculo da prescri√ß√£o penal ou administrativa, indicando se o fato se encontra prescrito ou se a apura√ß√£o deve prosseguir.

II ‚Äì DOS FATOS
A presente investiga√ß√£o preliminar foi instaurada para apurar os fatos noticiados por meio de ${origemProcesso || '[NFND / comunica√ß√£o inicial]'}, que relata que, no dia ${dataFato || '[DATA DO FATO]'}, o(s) policial(is) militar(es) ${investigados && investigados.length > 0 ? investigados.map(i => i.nome).join(', ') : '[NOME / IDENTIFICA√á√ÉO]'}, lotado(s) no(a) ${investigados && investigados.length > 0 ? investigados.map(i => i.unidade).join(', ') : '[UNIDADE]'}, teria(m) ${descricaoFatos || '[DESCRI√á√ÉO RESUMIDA DOS FATOS]'}.

III ‚Äì DAS DILIG√äNCIAS
Foram iniciadas dilig√™ncias para esclarecimento dos fatos, conforme segue:
${Object.keys(diligenciasRealizadas || {}).length > 0 ? Object.entries(diligenciasRealizadas).filter(([_, v]) => (v as any)?.realizada).map(([k, v]) => `- ${k}${(v as any).observacao ? ': ' + (v as any).observacao : ''}`).join('\n') : '[Lista automatizada pela IA com base nas dilig√™ncias realizadas]'}

Documentos providenciados:
- Ficha Funcional do(s) investigado(s)
- Extrato do SIGPAD
${documentos && documentos.length > 0 ? documentos.map(d => `- ${d}`).join('\n') : ''}

[Resumo anal√≠tico pela IA]:
Com base nas dilig√™ncias realizadas, exponha sinteticamente os elementos apurados em cada documento ou etapa da investiga√ß√£o.

IV ‚Äì DA FUNDAMENTA√á√ÉO
[Elabora√ß√£o pela IA com base nos dados e desfecho sugerido]:
Consolide os elementos f√°ticos e jur√≠dicos da investiga√ß√£o, oferecendo uma an√°lise t√©cnica fundamentada, com respaldo na legisla√ß√£o vigente, doutrina e jurisprud√™ncia nacional, destacando o nexo de causalidade, a exist√™ncia (ou n√£o) de autoria e materialidade, e a adequa√ß√£o t√≠pica, conforme o enquadramento legal aplic√°vel (CP, CPM, CPP, C√≥digo Disciplinar, Estatuto da Corpora√ß√£o, etc.).

V ‚Äì DA CONCLUS√ÉO
[Decis√£o orientada pela IA com justificativa]:
Considerando os elementos colhidos na presente investiga√ß√£o, conclua, justificadamente, por uma das seguintes provid√™ncias:
- Instaura√ß√£o de SAD (Sindicato Administrativo Disciplinar)
- Instaura√ß√£o de IPM (Inqu√©rito Policial Militar)
- Instaura√ß√£o de PADS (Processo Administrativo Disciplinar Sumar√≠ssimo)
- Redistribui√ß√£o para outra unidade
- Arquivamento, por aus√™ncia de elementos suficientes ou prescri√ß√£o
A conclus√£o deve vir acompanhada da justificativa legal e t√©cnica, considerando o grau de relev√¢ncia dos fatos, a exist√™ncia de ind√≠cios m√≠nimos de autoria e materialidade, e os crit√©rios de oportunidade e conveni√™ncia da administra√ß√£o p√∫blica.

RECIFE, [DATA DA ASSINATURA ELETR√îNICA]
`;

const parsearRelatorio = (response: string): RelatorioIA => {
  // Extrair se√ß√µes do relat√≥rio oficial
  const extrairSecao = (texto: string, titulo: string): string => {
    const regex = new RegExp(`##\\s*${titulo}[\\s\\S]*?\\n([\\s\\S]*?)(?=\\n##|$)`, 'i');
    const match = texto.match(regex);
    return match ? match[1].trim() : 'N√£o especificado';
  };

  const extrairCabecalho = (texto: string): string => {
    const regex = new RegExp(`##\\s*CABECALHO[\\s\\S]*?\\n([\\s\\S]*?)(?=\\n##\\s*I\\s*‚Äì|$)`, 'i');
    const match = texto.match(regex);
    return match ? match[1].trim() : 'RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR';
  };

  return {
    cabecalho: extrairCabecalho(response),
    das_preliminares: extrairSecao(response, 'I ‚Äì DAS PRELIMINARES'),
    dos_fatos: extrairSecao(response, 'II ‚Äì DOS FATOS'),
    das_diligencias: extrairSecao(response, 'III ‚Äì DAS DILIG√äNCIAS'),
    da_fundamentacao: extrairSecao(response, 'IV ‚Äì DA FUNDAMENTA√á√ÉO'),
    da_conclusao: extrairSecao(response, 'V ‚Äì DA CONCLUS√ÉO'),
    raw_response: response
  };
};

// Fallback: Gera um relat√≥rio simulado para ambiente de desenvolvimento ou erro na API
function gerarRelatorioSimulado(dados: RelatorioDados) {
  return Promise.resolve({
    cabecalho: 'RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR (SIMULADO)',
    das_preliminares: 'Simula√ß√£o: Preliminares do caso para ' + (dados.nome || 'NOME N√ÉO INFORMADO'),
    dos_fatos: 'Simula√ß√£o: Fatos do processo.',
    das_diligencias: 'Simula√ß√£o: Dilig√™ncias realizadas.',
    da_fundamentacao: 'Simula√ß√£o: Fundamenta√ß√£o jur√≠dica.',
    da_conclusao: 'Simula√ß√£o: Conclus√£o e encaminhamentos.',
    raw_response: 'Este √© um relat√≥rio simulado para ambiente de desenvolvimento.'
  });
}

export const openaiService = {
  async gerarRelatorioJuridico(dados: RelatorioDados): Promise<RelatorioIA> {
    try {
      console.log('üîç Iniciando gera√ß√£o de relat√≥rio via backend...');
      // Montar prompt detalhado com todos os dados do processo
      const prompt = RELATORIO_FINAL_PROMPT({
        numeroProcesso: dados.numeroProcesso || dados.numero_processo || '',
        numeroDespacho: dados.numeroDespacho || dados.numero_despacho || '',
        dataDespacho: dados.dataDespacho || dados.data_despacho || '',
        origemProcesso: dados.origemProcesso || dados.origem_processo || '',
        dataFato: dados.dataFato || dados.data_fato || '',
        vitimas: dados.vitimas || [],
        investigados: dados.investigados || [],
        descricaoFatos: dados.descricaoFatos || dados.descricao_fatos || dados.descricao || '',
        statusFuncional: dados.statusFuncional || dados.status_funcional || '',
        diligenciasRealizadas: dados.diligenciasRealizadas || dados.diligencias_realizadas || {},
        numeroSigpad: dados.numeroSigpad || dados.numero_sigpad || '',
        documentos: dados.documentos || [],
      });
      const response = await fetch(`${BACKEND_URL}/api/openai/gerar-relatorio`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ dadosProcesso: dados }), // <-- CORRETO!
      });
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Erro no backend:', errorData);
        throw new Error(`Erro no backend: ${errorData.error || response.statusText}`);
      }
      const data = await response.json();
      console.log('‚úÖ Relat√≥rio recebido do backend');
      return parsearRelatorio(
        typeof data === 'string' ? data : (data.relatorio || data.analise || JSON.stringify(data))
      );
    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio:', error);
      throw error;
    }
  },

  // Novo m√©todo: interpretarTipificacao
  /**
   * Recebe um texto livre e a data do fato, retorna a tipifica√ß√£o penal sugerida e a data da prescri√ß√£o.
   */
  async interpretarTipificacao({ texto, dataFato }: { texto: string, dataFato: Date }) {
    try {
      console.log('üîç Iniciando an√°lise de tipifica√ß√£o via backend...');
      
      const response = await fetch(`${BACKEND_URL}/api/openai/interpretar-tipificacao`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          descricaoCrime: texto,
          contexto: `Data do fato: ${dataFato instanceof Date ? dataFato.toLocaleDateString('pt-BR') : dataFato}`
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Erro no backend:', errorData);
        throw new Error(`Erro no backend: ${errorData.error || response.statusText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Resposta recebida do backend');
      
      // Converter formato do backend para o formato esperado pelo frontend
      return {
        tipificacao_principal: data.tipificacao_principal || 'N√£o identificado',
        fundamentacao: data.fundamentacao || '',
        tipificacoes_alternativas: Array.isArray(data.tipificacoes_alternativas) 
          ? data.tipificacoes_alternativas 
          : (data.tipificacoes_alternativas ? [data.tipificacoes_alternativas] : []),
        tipificacoes_disciplinares: Array.isArray(data.tipificacoes_disciplinares) 
          ? data.tipificacoes_disciplinares 
          : (data.tipificacoes_disciplinares ? [data.tipificacoes_disciplinares] : []),
        prescricao_penal: data.prescricao_penal || '',
        prescricao_administrativa: data.prescricao_administrativa || '',
        competencia: data.competencia || '',
        observacoes: data.observacoes || ''
      };
    } catch (error) {
      console.error('‚ùå Erro ao interpretar tipifica√ß√£o:', error);
      throw error;
    }
  }
}; 