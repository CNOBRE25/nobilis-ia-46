export interface RelatorioDados {
  [key: string]: any; // Permitir todos os campos dinamicamente
}

export interface RelatorioIA {
  cabecalho: string;
  das_preliminares: string;
  dos_fatos: string;
  das_diligencias: string;
  da_fundamentacao: string;
  da_conclusao: string;
  raw_response: string;
}

<<<<<<< HEAD
// Configura√ß√£o do Backend
const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || (
  import.meta.env.PROD 
    ? 'https://nobilis-ia-46.vercel.app' 
    : 'http://localhost:3002'
);

// Debug: Verificar se o backend est√° dispon√≠vel
console.log('üîç Debug - Backend URL:', BACKEND_URL);

const RELATORIO_FINAL_PROMPT = ({
  numeroProcesso = '',
  numeroDespacho = '',
  dataDespacho = '',
  origemProcesso = '',
  dataFato = '',
  vitimas = [],
  investigados = [],
  descricaoFatos = '',
  statusFuncional = '',
  diligenciasRealizadas = {},
  numeroSigpad = '',
  documentos = [],
}) => `
Voc√™ √© um ANALISTA JUR√çDICO MILITAR ESPECIALIZADO com vasta experi√™ncia em direito penal, direito penal militar e direito administrativo disciplinar. 

SUA FUN√á√ÉO:
Gerar um RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR fundamentado, estruturado e t√©cnico, usando TODOS os dados fornecidos do processo.
=======
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

const PROMPT_TEMPLATE = `
Voc√™ √© um ANALISTA JUR√çDICO MILITAR ESPECIALIZADO na elabora√ß√£o de RELAT√ìRIOS DE INVESTIGA√á√ÉO PRELIMINAR (IP) da Pol√≠cia Militar de Pernambuco.

Expertise em:
- C√≥digo Penal Militar (Decreto-Lei n¬∫ 1.001/69)
- Regulamento Disciplinar da PM-PE (Decreto n¬∫ 11.817/86)
- C√≥digo Penal Comum e legisla√ß√£o correlata
- C√°lculos de prescri√ß√£o penal e disciplinar
- Jurisprud√™ncia dos Tribunais Superiores

REGRAS FUNDAMENTAIS:
1. ANALISE cada campo do processo como relevante para a an√°lise
2. IDENTIFIQUE crimes penais E transgress√µes disciplinares
3. FUNDAMENTE cada tipifica√ß√£o na legisla√ß√£o brasileira
4. CALCULE prescri√ß√µes considerando a data do fato
5. DETERMINE a compet√™ncia jurisdicional
6. USE linguagem formal, t√©cnica e cite legisla√ß√£o aplic√°vel

<<<<<<< HEAD
LEGISLA√á√ÉO APLIC√ÅVEL:
- C√≥digo Penal (CP) - Art. 1¬∫ a 361
- C√≥digo Penal Militar (CPM) - Decreto-Lei 1.001/1969
- Lei Maria da Penha (Lei 11.340/2006)
- Estatuto da Crian√ßa e Adolescente (Lei 8.069/1990)
- C√≥digo Disciplinar da PMPE
- Lei de Drogas (Lei 11.343/2006)
- Lei de Crimes Hediondos (Lei 8.072/1990)

DADOS DO PROCESSO:
RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR
PROCESSO n¬∫: ${numeroProcesso}
Despacho de Instaura√ß√£o n¬∫: ${numeroDespacho}
Data do Despacho: ${dataDespacho}
Origem: ${origemProcesso}
Data do Fato: ${dataFato}
V√≠tima(s): ${(Array.isArray(vitimas) && vitimas.length > 0) ? vitimas.map(v => v.nome).join(', ') : 'N√£o informado'}
Investigado(s): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.nome).join(', ') : 'N√£o informado'}
Matr√≠cula(s): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.matricula).join(', ') : 'N√£o informado'}
Admiss√£o(√µes): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.dataAdmissao || 'N√£o informado').join(', ') : 'N√£o informado'}
Lota√ß√£o(√µes) Atual(is): ${(Array.isArray(investigados) && investigados.length > 0) ? investigados.map(i => i.unidade).join(', ') : 'N√£o informado'}
Status Funcional: ${statusFuncional}
Descri√ß√£o dos Fatos: ${descricaoFatos}
N√∫mero SIGPAD: ${numeroSigpad}
Documentos: ${documentos && documentos.length > 0 ? documentos.join(', ') : 'N√£o informado'}

FORMATO OBRIGAT√ìRIO DO RELAT√ìRIO:
=======
GERE UM RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR SEGUINDO RIGOROSAMENTE A ESTRUTURA OFICIAL:

## CABECALHO
RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR
[Identifica√ß√£o completa do processo conforme dados acima]

## I ‚Äì DAS PRELIMINARES
<<<<<<< HEAD
[An√°lise pela IA]:
- Resumo objetivo dos fatos noticiados
- Identifica√ß√£o de poss√≠veis crimes ou transgress√µes disciplinares atribu√≠dos aos investigados
- Tipifica√ß√£o legal com fundamenta√ß√£o detalhada
- An√°lise da legisla√ß√£o aplic√°vel (CP/CPM) baseada no status funcional
- C√°lculo da prescri√ß√£o penal e administrativa considerando a data do fato
- Determina√ß√£o da compet√™ncia jurisdicional
- Indica√ß√£o se o fato se encontra prescrito ou se a apura√ß√£o deve prosseguir

## II ‚Äì DOS FATOS
A presente investiga√ß√£o preliminar foi instaurada para apurar os fatos noticiados por meio de ${origemProcesso || '[NFND / comunica√ß√£o inicial]'}, que relata que, no dia ${dataFato || '[DATA DO FATO]'}, o(s) policial(is) militar(es) ${investigados && investigados.length > 0 ? investigados.map(i => i.nome).join(', ') : '[NOME / IDENTIFICA√á√ÉO]'}, lotado(s) no(a) ${investigados && investigados.length > 0 ? investigados.map(i => i.unidade).join(', ') : '[UNIDADE]'}, teria(m) ${descricaoFatos || '[DESCRI√á√ÉO RESUMIDA DOS FATOS]'}.

[An√°lise complementar pela IA]:
- Identifica√ß√£o dos elementos do tipo penal
- An√°lise da autoria e materialidade
- Contextualiza√ß√£o temporal e espacial
- Nexo de causalidade

## III ‚Äì DAS DILIG√äNCIAS
Foram iniciadas dilig√™ncias para esclarecimento dos fatos, conforme segue:
${Object.keys(diligenciasRealizadas || {}).length > 0 ? Object.entries(diligenciasRealizadas).filter(([_, v]) => (v as any)?.realizada).map(([k, v]) => `- ${k}${(v as any).observacao ? ': ' + (v as any).observacao : ''}`).join('\n') : '[Lista automatizada pela IA com base nas dilig√™ncias realizadas]'}

Documentos providenciados:
- Ficha Funcional do(s) investigado(s)
- Extrato do SIGPAD
${documentos && documentos.length > 0 ? documentos.map(d => `- ${d}`).join('\n') : ''}

[Resumo anal√≠tico pela IA]:
- An√°lise dos elementos probat√≥rios colhidos
- Identifica√ß√£o de testemunhas e documentos
- Avalia√ß√£o da sufici√™ncia probat√≥ria
- Exposi√ß√£o sint√©tica dos elementos apurados em cada documento ou etapa da investiga√ß√£o

## IV ‚Äì DA FUNDAMENTA√á√ÉO
[Elabora√ß√£o pela IA com base nos dados e desfecho sugerido]:
- Tipifica√ß√£o penal principal fundamentada
- An√°lise dos elementos do tipo penal
- Jurisprud√™ncia aplic√°vel
- Nexo de causalidade
- Adequa√ß√£o t√≠pica
- Fundamenta√ß√£o legal detalhada
- Consolida√ß√£o dos elementos f√°ticos e jur√≠dicos da investiga√ß√£o
- An√°lise t√©cnica fundamentada com respaldo na legisla√ß√£o vigente, doutrina e jurisprud√™ncia nacional
- Destaque do nexo de causalidade, exist√™ncia (ou n√£o) de autoria e materialidade
- Adequa√ß√£o t√≠pica conforme o enquadramento legal aplic√°vel (CP, CPM, CPP, C√≥digo Disciplinar, Estatuto da Corpora√ß√£o, etc.)

## V ‚Äì DA CONCLUS√ÉO
[Decis√£o orientada pela IA com justificativa]:
Considerando os elementos colhidos na presente investiga√ß√£o, conclua, justificadamente, por uma das seguintes provid√™ncias:
=======
[Elabore um resumo objetivo dos fatos noticiados, identifique o(s) poss√≠vel(eis) crime(s) ou transgress√£o(√µes) disciplinar(es) com respectiva tipifica√ß√£o legal. Considere o status funcional do agente (militar em servi√ßo, militar de folga, etc.). Aplique a legisla√ß√£o adequada (CPM, CP, Estatuto, C√≥digo Disciplinar). Analise a natureza da infra√ß√£o e, com base na data do fato, realize o c√°lculo da prescri√ß√£o penal ou administrativa, indicando se o fato se encontra prescrito ou se a apura√ß√£o deve prosseguir.]

## II ‚Äì DOS FATOS
A presente investiga√ß√£o preliminar foi instaurada com a finalidade de apurar os fatos noticiados por meio da {origem}, que relata que, no dia {data_fato}, o policial militar {nome}, lotado no(a) {unidade}, teria {descricao}.

[Complete com an√°lise detalhada dos fatos baseada na descri√ß√£o fornecida]

## III ‚Äì DAS DILIG√äNCIAS
Foram iniciadas dilig√™ncias para esclarecimento dos fatos, conforme segue:

[Liste automaticamente as dilig√™ncias padr√£o baseadas no tipo de investiga√ß√£o]

Documentos providenciados:
- Ficha Funcional do investigado
- Extrato do SIGPAD
- [Outros documentos relevantes baseados no caso]

[Forne√ßa resumo anal√≠tico: Com base nas dilig√™ncias realizadas, observou-se que: (exposi√ß√£o sint√©tica dos elementos que seriam apurados)]

## IV ‚Äì DA FUNDAMENTA√á√ÉO
[Consolide os elementos f√°ticos e jur√≠dicos da investiga√ß√£o. Ofere√ßa an√°lise t√©cnica fundamentada com respaldo na legisla√ß√£o vigente, doutrina e jurisprud√™ncia nacional. Destaque o nexo de causalidade, a exist√™ncia (ou n√£o) de autoria e materialidade, e a adequa√ß√£o t√≠pica, conforme o enquadramento legal aplic√°vel (CP, CPM, CPP, C√≥digo Disciplinar, Estatuto da Corpora√ß√£o).]

## V ‚Äì DA CONCLUS√ÉO
[Conclua justificadamente por uma das seguintes provid√™ncias:
- Instaura√ß√£o de SAD (Sindicato Administrativo Disciplinar)
- Instaura√ß√£o de IPM (Inqu√©rito Policial Militar)
- Instaura√ß√£o de PADS (Processo Administrativo Disciplinar Sumar√≠ssimo)
- Redistribui√ß√£o para outra unidade
- Arquivamento, por aus√™ncia de elementos suficientes ou prescri√ß√£o

<<<<<<< HEAD
A conclus√£o deve vir acompanhada da justificativa legal e t√©cnica, considerando:
- Grau de relev√¢ncia dos fatos
- Exist√™ncia de ind√≠cios m√≠nimos de autoria e materialidade
- Crit√©rios de oportunidade e conveni√™ncia da administra√ß√£o p√∫blica
- S√≠ntese conclusiva fundamentada
- Recomenda√ß√µes espec√≠ficas

IMPORTANTE:
- Seja PRECISO e T√âCNICO
- FUNDAMENTE cada afirma√ß√£o na legisla√ß√£o
- ANALISE o contexto completo dos fatos
- CONSIDERE tanto aspectos penais quanto disciplinares
- CALCULE prescri√ß√µes corretamente
- IDENTIFIQUE a compet√™ncia jurisdicional adequada

RECIFE, [DATA DA ASSINATURA ELETR√îNICA]
=======
A conclus√£o deve vir acompanhada da justificativa legal e t√©cnica, considerando o grau de relev√¢ncia dos fatos, a exist√™ncia de ind√≠cios m√≠nimos de autoria e materialidade, e os crit√©rios de oportunidade e conveni√™ncia da administra√ß√£o p√∫blica.]

RECIFE, [Data atual]

INSTRU√á√ïES T√âCNICAS:
- Use APENAS legisla√ß√£o vigente
- Calcule datas de prescri√ß√£o com precis√£o
- Cite artigos espec√≠ficos
- Seja t√©cnico e fundamentado
- Considere jurisprud√™ncia relevante
- Aplique corretamente as compet√™ncias (Justi√ßa Militar vs Comum)
`;

const parsearRelatorio = (response: string): RelatorioIA => {
  // Extrair se√ß√µes do relat√≥rio oficial
  const extrairSecao = (texto: string, titulo: string): string => {
    const regex = new RegExp(`##\\s*${titulo}[\\s\\S]*?\\n([\\s\\S]*?)(?=\\n##|$)`, 'i');
    const match = texto.match(regex);
    return match ? match[1].trim() : 'N√£o especificado';
  };

  const extrairCabecalho = (texto: string): string => {
    const regex = new RegExp(`##\\s*CABECALHO[\\s\\S]*?\\n([\\s\\S]*?)(?=\\n##\\s*I\\s*‚Äì|$)`, 'i');
    const match = texto.match(regex);
    return match ? match[1].trim() : 'RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR';
  };

  return {
    cabecalho: extrairCabecalho(response),
    das_preliminares: extrairSecao(response, 'I ‚Äì DAS PRELIMINARES'),
    dos_fatos: extrairSecao(response, 'II ‚Äì DOS FATOS'),
    das_diligencias: extrairSecao(response, 'III ‚Äì DAS DILIG√äNCIAS'),
    da_fundamentacao: extrairSecao(response, 'IV ‚Äì DA FUNDAMENTA√á√ÉO'),
    da_conclusao: extrairSecao(response, 'V ‚Äì DA CONCLUS√ÉO'),
    raw_response: response
  };
};

// Fun√ß√£o de fallback para gerar relat√≥rio simulado
const gerarRelatorioSimulado = (dados: RelatorioDados): RelatorioIA => {
  const relatorioSimulado = `
## CABECALHO
RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR
SIGPAD n¬∫: ${dados.numero_sigpad || 'N√£o informado'}
Despacho de Instaura√ß√£o n¬∫: ${dados.numero_despacho || 'N√£o informado'}
Data do Despacho: ${dados.data_despacho || 'N√£o informado'}
Origem: ${dados.origem || 'N√£o informado'}
Data do Fato: ${dados.data_fato || 'N√£o informado'}
V√≠tima: ${dados.vitima || 'N√£o informado'}
Investigado: ${dados.nome || 'N√£o informado'}
Matr√≠cula: ${dados.matricula || 'N√£o informado'}
Admiss√£o: ${dados.data_admissao || 'N√£o informado'}
Lota√ß√£o Atual: ${dados.unidade || 'N√£o informado'}

## I ‚Äì DAS PRELIMINARES
Considerando o status funcional do investigado como militar em servi√ßo, a tipifica√ß√£o e o c√°lculo de prescri√ß√£o devem ser realizados com base no C√≥digo Penal Militar (Decreto-Lei n¬∫ 1.001/1969). O crime de tortura n√£o est√° explicitamente tipificado no CPM, mas pode ser enquadrado em crimes como les√£o corporal grave ou grav√≠ssima, conforme os artigos 119 e 121 do CPM. A prescri√ß√£o, neste caso, deve ser calculada com base na pena m√°xima cominada ao delito mais grave que se adequa aos fatos narrados, sendo a les√£o corporal grav√≠ssima com pena de reclus√£o de at√© 8 anos, resultando em um prazo prescricional de 8 anos conforme o artigo 125 do CPM.

## II ‚Äì DOS FATOS
Em data de ${dados.data_fato || 'N√£o informado'}, a v√≠tima, ${dados.vitima || 'N√£o informado'}, alega ter sido espancada at√© sangrar na cabe√ßa por ${dados.nome || 'N√£o informado'}, militar em servi√ßo. Ap√≥s a agress√£o inicial, a v√≠tima foi levada a um matagal onde teria sido torturada com um saco na cabe√ßa e amea√ßada de morte caso n√£o revelasse a localiza√ß√£o de uma suposta arma de fogo.

## III ‚Äì DAS DILIG√äNCIAS
At√© o presente momento, n√£o foram realizadas dilig√™ncias no √¢mbito deste processo, conforme indicado pelos dados fornecidos. A aus√™ncia de dilig√™ncias representa um obst√°culo √† completa elucida√ß√£o dos fatos e √† adequada tipifica√ß√£o penal.

## IV ‚Äì DA FUNDAMENTA√á√ÉO
A fundamenta√ß√£o jur√≠dica para o presente caso baseia-se na aplica√ß√£o do C√≥digo Penal Militar, dado o status funcional do investigado. O crime de les√£o corporal, conforme descrito pela v√≠tima, pode ser tipificado como les√£o corporal grav√≠ssima nos termos do artigo 119 do CPM, devido √† natureza das agress√µes relatadas.

## V ‚Äì DA CONCLUS√ÉO
Com base na an√°lise dos fatos narrados e na legisla√ß√£o aplic√°vel, recomenda-se a instaura√ß√£o de IPM (Inqu√©rito Policial Militar) para apura√ß√£o completa dos fatos, considerando a gravidade das acusa√ß√µes e a necessidade de produ√ß√£o de provas para fundamentar eventual a√ß√£o penal.
`;

  return parsearRelatorio(relatorioSimulado);
};

export const openaiService = {
  async gerarRelatorioJuridico(dados: RelatorioDados): Promise<RelatorioIA> {
<<<<<<< HEAD
    try {
      console.log('üîç Iniciando gera√ß√£o de relat√≥rio via backend...');
      // Montar prompt detalhado com todos os dados do processo
      const prompt = RELATORIO_FINAL_PROMPT({
        numeroProcesso: dados.numeroProcesso || dados.numero_processo || '',
        numeroDespacho: dados.numeroDespacho || dados.numero_despacho || '',
        dataDespacho: dados.dataDespacho || dados.data_despacho || '',
        origemProcesso: dados.origemProcesso || dados.origem_processo || '',
        dataFato: dados.dataFato || dados.data_fato || '',
        vitimas: dados.vitimas || [],
        investigados: dados.investigados || [],
        descricaoFatos: dados.descricaoFatos || dados.descricao_fatos || dados.descricao || '',
        statusFuncional: dados.statusFuncional || dados.status_funcional || '',
        diligenciasRealizadas: dados.diligenciasRealizadas || dados.diligencias_realizadas || {},
        numeroSigpad: dados.numeroSigpad || dados.numero_sigpad || '',
        documentos: dados.documentos || [],
      });
      const response = await fetch(`${BACKEND_URL}/api/openai/gerar-relatorio`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ dadosProcesso: dados }), // <-- CORRETO!
      });
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Erro no backend:', errorData);
        throw new Error(`Erro no backend: ${errorData.error || response.statusText}`);
      }
      const data = await response.json();
      console.log('‚úÖ Relat√≥rio recebido do backend');
      return parsearRelatorio(
        typeof data === 'string' ? data : (data.relatorio || data.analise || JSON.stringify(data))
      );
    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio:', error);
      throw error;
=======
    console.log('üîç Iniciando gera√ß√£o de relat√≥rio IA...');
    console.log('üìä Dados do formul√°rio:', dados);
    
    // Check if OpenAI API is configured
    if (!OPENAI_API_KEY) {
      console.warn('‚ö†Ô∏è OpenAI API Key n√£o configurada. Usando modo de simula√ß√£o.');
      return gerarRelatorioSimulado(dados);
    }
    
    console.log('‚úÖ API Key encontrada, fazendo requisi√ß√£o para OpenAI...');

<<<<<<< HEAD

=======
    try {
      const prompt = PROMPT_TEMPLATE
        .replace(/{nome}/g, dados.nome || 'N√£o informado')
        .replace(/{cargo}/g, dados.cargo || 'N√£o informado')
        .replace(/{unidade}/g, dados.unidade || 'N√£o informado')
        .replace(/{data_fato}/g, dados.data_fato || 'N√£o informado')
        .replace(/{tipo_investigado}/g, dados.tipo_investigado || 'N√£o informado')
        .replace(/{descricao}/g, dados.descricao || 'N√£o informado')
        .replace(/{numero_sigpad}/g, dados.numero_sigpad || 'N√£o informado')
        .replace(/{numero_despacho}/g, dados.numero_despacho || 'N√£o informado')
        .replace(/{data_despacho}/g, dados.data_despacho || 'N√£o informado')
        .replace(/{origem}/g, dados.origem || 'N√£o informado')
        .replace(/{vitima}/g, dados.vitima || 'N√£o informado')
        .replace(/{matricula}/g, dados.matricula || 'N√£o informado')
        .replace(/{data_admissao}/g, dados.data_admissao || 'N√£o informado');

      console.log('üì° Fazendo requisi√ß√£o para OpenAI...');
      const response = await fetch(OPENAI_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: 'Voc√™ √© um analista jur√≠dico militar especializado em investiga√ß√µes preliminares da PM-PE.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 4000,
          temperature: 0.3,
        }),
      });

      console.log('üìä Status da resposta:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erro na API OpenAI:', response.status, response.statusText);
        console.error('üìÑ Detalhes do erro:', errorText);
        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      const content = data.choices[0]?.message?.content;

      if (!content) {
        console.error('‚ùå Resposta vazia da API OpenAI');
        throw new Error('Resposta vazia da API OpenAI');
      }

      console.log('‚úÖ Resposta recebida da OpenAI, processando...');
      return parsearRelatorio(content);
    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio com IA:', error);
      console.log('üîÑ Usando modo de simula√ß√£o como fallback...');
      // Fallback para relat√≥rio simulado em caso de erro
      return gerarRelatorioSimulado(dados);
    }
  }
}; 