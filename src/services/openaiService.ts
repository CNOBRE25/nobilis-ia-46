export interface RelatorioDados {
  nome: string;
  tipo_investigado: string;
  cargo: string;
  unidade: string;
  data_fato: string;
  descricao: string;
  numero_sigpad?: string;
  numero_despacho?: string;
  data_despacho?: string;
  origem?: string;
  vitima?: string;
  matricula?: string;
  data_admissao?: string;
  diligencias_realizadas?: string[];
}

export interface RelatorioIA {
  cabecalho: string;
  das_preliminares: string;
  dos_fatos: string;
  das_diligencias: string;
  da_fundamentacao: string;
  da_conclusao: string;
  raw_response: string;
}

const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;

// Debug: Verificar se a chave est√° sendo carregada
console.log('üîç Debug - VITE_OPENAI_API_KEY:', OPENAI_API_KEY ? 'Configurada' : 'N√£o configurada');
console.log('üîç Debug - Chave (primeiros 20 chars):', OPENAI_API_KEY ? OPENAI_API_KEY.substring(0, 20) + '...' : 'N/A');

if (!OPENAI_API_KEY && import.meta.env.DEV) {
  console.warn("A chave da OpenAI (VITE_OPENAI_API_KEY) n√£o est√° definida. Adicione ao seu arquivo .env.local.");
}
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

const PROMPT_TEMPLATE = `
Voc√™ √© um ANALISTA JUR√çDICO MILITAR ESPECIALIZADO na elabora√ß√£o de RELAT√ìRIOS DE INVESTIGA√á√ÉO PRELIMINAR (IP) da Pol√≠cia Militar de Pernambuco, com expertise em:

‚Ä¢ C√≥digo Penal Militar (Decreto-Lei n¬∫ 1.001/69)
‚Ä¢ Regulamento Disciplinar da PM-PE (Decreto n¬∫ 11.817/86)
‚Ä¢ C√≥digo Penal Comum (Lei n¬∫ 2.848/40) e legisla√ß√£o correlata
‚Ä¢ C√≥digo de Processo Penal Militar (Decreto-Lei n¬∫ 1.002/69)
‚Ä¢ Estatuto dos Militares Estaduais (Lei n¬∫ 6.880/80)
‚Ä¢ C√°lculos de prescri√ß√£o penal e disciplinar
‚Ä¢ Jurisprud√™ncia dos Tribunais Superiores (STF, STJ, STM)

DADOS FORNECIDOS:
Nome: {nome}
Cargo/Patente: {cargo}
Unidade: {unidade}
Data do Fato: {data_fato}
Tipo de Procedimento: {tipo_investigado}
Descri√ß√£o dos Fatos: {descricao}
SIGPAD: {numero_sigpad}
Despacho: {numero_despacho}
Data Despacho: {data_despacho}
Origem: {origem}
V√≠tima: {vitima}
Matr√≠cula: {matricula}
Admiss√£o: {data_admissao}

ELABORE UM RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR COMPLETO, FUNDAMENTADO E ESTRUTURADO:

## CABECALHO
RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR
SIGPAD n¬∫: {numero_sigpad}
Despacho de Instaura√ß√£o n¬∫: {numero_despacho}
Data do Despacho: {data_despacho}
Origem: {origem}
Data do Fato: {data_fato}
V√≠tima: {vitima}
Investigado: {nome}
Matr√≠cula: {matricula}
Admiss√£o: {data_admissao}
Lota√ß√£o Atual: {unidade}

## I ‚Äì DAS PRELIMINARES

1.1. **Fatos Noticiados:**
[Resumo objetivo e t√©cnico dos fatos, identificando os elementos essenciais: quem, o qu√™, quando, onde, como e por qu√™]

1.2. **An√°lise Jur√≠dica Preliminar:**
[Identifica√ß√£o das poss√≠veis tipifica√ß√µes penais e/ou disciplinares aplic√°veis, com cita√ß√£o espec√≠fica dos artigos e fundamenta√ß√£o t√©cnica]

1.3. **C√°lculo de Prescri√ß√£o:**
[An√°lise da prescri√ß√£o penal e administrativa com base na data do fato, citando os artigos aplic√°veis e realizando o c√°lculo preciso]

1.4. **Compet√™ncia Jurisdicional:**
[Defini√ß√£o da compet√™ncia (Justi√ßa Militar Estadual, Justi√ßa Comum, ou ambas) com fundamenta√ß√£o legal]

## II ‚Äì DOS FATOS

2.1. **Narrativa dos Fatos:**
A presente investiga√ß√£o preliminar foi instaurada com a finalidade de apurar os fatos noticiados por meio da {origem}, que relata que, no dia {data_fato}, o policial militar {nome}, lotado no(a) {unidade}, teria {descricao}.

[Desenvolver narrativa detalhada, cronol√≥gica e objetiva dos fatos, destacando elementos relevantes para a an√°lise jur√≠dica]

2.2. **Elementos de Prova Identificados:**
[Listar e analisar os elementos probat√≥rios dispon√≠veis ou que poderiam ser colhidos]

2.3. **Contexto Funcional:**
[Analisar se o fato ocorreu em servi√ßo, de folga, ou em situa√ß√£o h√≠brida, e suas implica√ß√µes jur√≠dicas]

## III ‚Äì DAS DILIG√äNCIAS

3.1. **Dilig√™ncias Realizadas:**
‚Ä¢ Colheita de depoimentos
‚Ä¢ Requisi√ß√£o de documentos
‚Ä¢ An√°lise de registros funcionais
‚Ä¢ Verifica√ß√£o de antecedentes
‚Ä¢ [Outras dilig√™ncias espec√≠ficas ao caso]

3.2. **Documentos Colhidos:**
‚Ä¢ Ficha Funcional do investigado
‚Ä¢ Extrato do SIGPAD
‚Ä¢ Registros de ocorr√™ncia
‚Ä¢ [Documentos espec√≠ficos do caso]

3.3. **Resumo Anal√≠tico das Dilig√™ncias:**
[Exposi√ß√£o sint√©tica dos elementos apurados e sua relev√¢ncia para a conclus√£o]

## IV ‚Äì DA FUNDAMENTA√á√ÉO

4.1. **An√°lise F√°tica:**
[Consolida√ß√£o dos elementos f√°ticos coletados, estabelecendo o nexo causal e a materialidade dos fatos]

4.2. **An√°lise Jur√≠dica:**
[Fundamenta√ß√£o t√©cnica com base na legisla√ß√£o vigente, doutrina e jurisprud√™ncia, analisando:
‚Ä¢ Adequa√ß√£o t√≠pica
‚Ä¢ Elementos subjetivos
‚Ä¢ Causas de exclus√£o de ilicitude
‚Ä¢ Causas de exclus√£o de culpabilidade]

4.3. **Aplica√ß√£o da Legisla√ß√£o:**
[Cita√ß√£o e aplica√ß√£o espec√≠fica dos artigos do CPM, CP, C√≥digo Disciplinar, Estatuto, conforme o caso]

4.4. **Jurisprud√™ncia Aplic√°vel:**
[Cita√ß√£o de precedentes relevantes dos Tribunais Superiores, quando aplic√°vel]

## V ‚Äì DA CONCLUS√ÉO

5.1. **S√≠ntese dos Elementos:**
[Resumo dos principais elementos f√°ticos e jur√≠dicos identificados]

5.2. **Recomenda√ß√£o T√©cnica:**
[Conclus√£o fundamentada, recomendando uma das seguintes provid√™ncias:
‚Ä¢ Instaura√ß√£o de SAD (Sindicato Administrativo Disciplinar)
‚Ä¢ Instaura√ß√£o de IPM (Inqu√©rito Policial Militar)
‚Ä¢ Instaura√ß√£o de PADS (Processo Administrativo Disciplinar Sumar√≠ssimo)
‚Ä¢ Redistribui√ß√£o para outra unidade
‚Ä¢ Arquivamento por aus√™ncia de elementos suficientes
‚Ä¢ Arquivamento por prescri√ß√£o]

5.3. **Justificativa Legal:**
[Fundamenta√ß√£o t√©cnica da recomenda√ß√£o, considerando:
‚Ä¢ Grau de relev√¢ncia dos fatos
‚Ä¢ Exist√™ncia de ind√≠cios m√≠nimos de autoria e materialidade
‚Ä¢ Crit√©rios de oportunidade e conveni√™ncia da administra√ß√£o p√∫blica
‚Ä¢ Interesse p√∫blico na apura√ß√£o]

RECIFE, [Data atual]

INSTRU√á√ïES T√âCNICAS OBRIGAT√ìRIAS:
‚Ä¢ Use APENAS legisla√ß√£o vigente e atualizada
‚Ä¢ Calcule datas de prescri√ß√£o com precis√£o matem√°tica
‚Ä¢ Cite artigos espec√≠ficos com numera√ß√£o correta
‚Ä¢ Seja t√©cnico, objetivo e fundamentado
‚Ä¢ Considere jurisprud√™ncia relevante dos Tribunais Superiores
‚Ä¢ Aplique corretamente as compet√™ncias jurisdicionais
‚Ä¢ Mantenha linguagem jur√≠dica formal e t√©cnica
‚Ä¢ Estruture o relat√≥rio de forma l√≥gica e coesa
‚Ä¢ Evite redund√¢ncias e seja conciso
‚Ä¢ Priorize a clareza e objetividade na exposi√ß√£o
`;

const parsearRelatorio = (response: string): RelatorioIA => {
  // Extrair se√ß√µes do relat√≥rio oficial
  const extrairSecao = (texto: string, titulo: string): string => {
    const regex = new RegExp(`##\\s*${titulo}[\\s\\S]*?\\n([\\s\\S]*?)(?=\\n##|$)`, 'i');
    const match = texto.match(regex);
    return match ? match[1].trim() : 'N√£o especificado';
  };

  const extrairCabecalho = (texto: string): string => {
    const regex = new RegExp(`##\\s*CABECALHO[\\s\\S]*?\\n([\\s\\S]*?)(?=\\n##\\s*I\\s*‚Äì|$)`, 'i');
    const match = texto.match(regex);
    return match ? match[1].trim() : 'RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR';
  };

  return {
    cabecalho: extrairCabecalho(response),
    das_preliminares: extrairSecao(response, 'I ‚Äì DAS PRELIMINARES'),
    dos_fatos: extrairSecao(response, 'II ‚Äì DOS FATOS'),
    das_diligencias: extrairSecao(response, 'III ‚Äì DAS DILIG√äNCIAS'),
    da_fundamentacao: extrairSecao(response, 'IV ‚Äì DA FUNDAMENTA√á√ÉO'),
    da_conclusao: extrairSecao(response, 'V ‚Äì DA CONCLUS√ÉO'),
    raw_response: response
  };
};

// Fallback: Gera um relat√≥rio simulado para ambiente de desenvolvimento ou erro na API
function gerarRelatorioSimulado(dados: RelatorioDados) {
  return Promise.resolve({
    cabecalho: 'RELAT√ìRIO DE INVESTIGA√á√ÉO PRELIMINAR (SIMULADO)',
    das_preliminares: 'Simula√ß√£o: Preliminares do caso para ' + (dados.nome || 'NOME N√ÉO INFORMADO'),
    dos_fatos: 'Simula√ß√£o: Fatos do processo.',
    das_diligencias: 'Simula√ß√£o: Dilig√™ncias realizadas.',
    da_fundamentacao: 'Simula√ß√£o: Fundamenta√ß√£o jur√≠dica.',
    da_conclusao: 'Simula√ß√£o: Conclus√£o e encaminhamentos.',
    raw_response: 'Este √© um relat√≥rio simulado para ambiente de desenvolvimento.'
  });
}

export const openaiService = {
  async gerarRelatorioJuridico(dados: RelatorioDados): Promise<RelatorioIA> {
    // Check if OpenAI API is configured
    if (!OPENAI_API_KEY) {
      if (import.meta.env.DEV) {
        console.warn('OpenAI API Key n√£o configurada. Usando modo de simula√ß√£o.');
      }
      return gerarRelatorioSimulado(dados);
    }

    try {
      const prompt = PROMPT_TEMPLATE
        .replace(/{nome}/g, dados.nome || 'N√£o informado')
        .replace(/{cargo}/g, dados.cargo || 'N√£o informado')
        .replace(/{unidade}/g, dados.unidade || 'N√£o informado')
        .replace(/{data_fato}/g, dados.data_fato || 'N√£o informado')
        .replace(/{tipo_investigado}/g, dados.tipo_investigado || 'N√£o informado')
        .replace(/{descricao}/g, dados.descricao || 'N√£o informado')
        .replace(/{numero_sigpad}/g, dados.numero_sigpad || 'N√£o informado')
        .replace(/{numero_despacho}/g, dados.numero_despacho || 'N√£o informado')
        .replace(/{data_despacho}/g, dados.data_despacho || 'N√£o informado')
        .replace(/{origem}/g, dados.origem || 'N√£o informado')
        .replace(/{vitima}/g, dados.vitima || 'N√£o informado')
        .replace(/{matricula}/g, dados.matricula || 'N√£o informado')
        .replace(/{data_admissao}/g, dados.data_admissao || 'N√£o informado');

      const response = await fetch(OPENAI_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: 'Voc√™ √© um analista jur√≠dico militar especializado em investiga√ß√µes preliminares da PM-PE.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 1800,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      const content = data.choices[0]?.message?.content;

      if (!content) {
        throw new Error('Resposta vazia da API OpenAI');
      }

      return parsearRelatorio(content);
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('Erro ao gerar relat√≥rio com IA:', error);
      }
      // Fallback para relat√≥rio simulado em caso de erro
      return gerarRelatorioSimulado(dados);
    }
  },

  // Novo m√©todo: interpretarTipificacao
  /**
   * Recebe um texto livre e a data do fato, retorna a tipifica√ß√£o penal sugerida e a data da prescri√ß√£o.
   */
  async interpretarTipificacao({ texto, dataFato }: { texto: string, dataFato: Date }) {
    if (!OPENAI_API_KEY) {
      // Simula√ß√£o para dev
      return Promise.resolve({
        tipificacao: 'Art. 209, CPM ‚Äì Les√£o Corporal',
        fundamentacao: 'Simula√ß√£o: Les√£o corporal durante servi√ßo militar.',
        tipificacoesAlternativas: 'Art. 129, CP ‚Äì Les√£o Corporal (Justi√ßa Comum)',
        tipificacoesDisciplinares: 'Art. 25, RD-PE ‚Äì Falta Grave',
        dataPrescricao: '20/07/2029',
        dataPrescricaoAdm: '20/07/2034',
        competencia: 'Justi√ßa Militar Estadual',
        observacoes: 'Simula√ß√£o para ambiente de desenvolvimento.'
      });
    }
    try {
      const prompt = `Voc√™ √© um ANALISTA JUR√çDICO MILITAR ESPECIALIZADO em Direito Penal Militar, Direito Disciplinar e prescri√ß√£o penal/administrativa, com expertise em:

‚Ä¢ C√≥digo Penal Militar (Decreto-Lei n¬∫ 1.001/69)
‚Ä¢ C√≥digo Penal Comum (Lei n¬∫ 2.848/40)
‚Ä¢ Regulamento Disciplinar da PM-PE (Decreto n¬∫ 11.817/86)
‚Ä¢ Estatuto dos Militares Estaduais (Lei n¬∫ 6.880/80)
‚Ä¢ C√≥digo de Processo Penal Militar (Decreto-Lei n¬∫ 1.002/69)
‚Ä¢ Jurisprud√™ncia dos Tribunais Superiores (STF, STJ, STM)

ANALISE O SEGUINTE CASO:

**Descri√ß√£o dos fatos:** "${texto}"
**Data do fato:** ${dataFato instanceof Date ? dataFato.toLocaleDateString('pt-BR') : dataFato}

SUA AN√ÅLISE DEVE SER ESTRUTURADA E FUNDAMENTADA:

1. **TIPIFICA√á√ÉO PENAL PRINCIPAL:**
   - Identifique a tipifica√ß√£o penal mais adequada (CPM ou CP)
   - Cite o artigo espec√≠fico e o nome do crime
   - Fundamente por que esta tipifica√ß√£o √© a mais aplic√°vel

2. **TIPIFICA√á√ïES ALTERNATIVAS:**
   - Liste outras poss√≠veis tipifica√ß√µes penais aplic√°veis
   - Cite artigos e fundamenta√ß√£o para cada uma

3. **TIPIFICA√á√ïES DISCIPLINARES:**
   - Identifique poss√≠veis transgress√µes disciplinares
   - Cite artigos do Regulamento Disciplinar ou Estatuto
   - Fundamente a aplicabilidade

4. **C√ÅLCULO DE PRESCRI√á√ÉO:**
   - Calcule a prescri√ß√£o penal com base na data do fato
   - Calcule a prescri√ß√£o administrativa/disciplinar
   - Cite os artigos utilizados no c√°lculo
   - Indique se o fato est√° prescrito ou n√£o

5. **COMPET√äNCIA JURISDICIONAL:**
   - Defina se √© compet√™ncia da Justi√ßa Militar Estadual, Justi√ßa Comum, ou ambas
   - Fundamente a compet√™ncia

RESPONDA NO SEGUINTE FORMATO ESTRUTURADO:

**Tipifica√ß√£o penal sugerida:** [Artigo, C√≥digo - Nome do Crime]
**Fundamenta√ß√£o:** [Explica√ß√£o t√©cnica detalhada com cita√ß√£o de artigos e fundamenta√ß√£o jur√≠dica]
**Tipifica√ß√µes alternativas:** [Lista de outras tipifica√ß√µes aplic√°veis]
**Tipifica√ß√µes disciplinares:** [Transgress√µes disciplinares identificadas]
**Prescri√ß√£o penal:** [Data calculada - DD/MM/AAAA]
**Prescri√ß√£o administrativa:** [Data calculada - DD/MM/AAAA]
**Compet√™ncia:** [Justi√ßa Militar Estadual / Justi√ßa Comum / Ambas]
**Observa√ß√µes:** [Observa√ß√µes t√©cnicas relevantes, se houver]

SEJA T√âCNICO, OBJETIVO E FUNDAMENTADO EM SUA AN√ÅLISE.`;

      const response = await fetch(OPENAI_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: 'Voc√™ √© um analista jur√≠dico militar especializado em tipifica√ß√£o penal, disciplinar e prescri√ß√£o.' },
            { role: 'user', content: prompt }
          ],
          max_tokens: 600,
          temperature: 0.2,
        }),
      });
      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      const content = data.choices[0]?.message?.content || '';
      // Extrair todos os campos estruturados do texto retornado
      const tipMatch = content.match(/\*\*Tipifica√ß√£o penal sugerida:\*\*\s*(.*?)(?=\n\*\*|$)/i);
      const fundMatch = content.match(/\*\*Fundamenta√ß√£o:\*\*\s*([\s\S]*?)(?=\n\*\*|$)/i);
      const tipAltMatch = content.match(/\*\*Tipifica√ß√µes alternativas:\*\*\s*([\s\S]*?)(?=\n\*\*|$)/i);
      const tipDiscMatch = content.match(/\*\*Tipifica√ß√µes disciplinares:\*\*\s*([\s\S]*?)(?=\n\*\*|$)/i);
      const prescPenalMatch = content.match(/\*\*Prescri√ß√£o penal:\*\*\s*(.*?)(?=\n\*\*|$)/i);
      const prescAdmMatch = content.match(/\*\*Prescri√ß√£o administrativa:\*\*\s*(.*?)(?=\n\*\*|$)/i);
      const competenciaMatch = content.match(/\*\*Compet√™ncia:\*\*\s*(.*?)(?=\n\*\*|$)/i);
      const obsMatch = content.match(/\*\*Observa√ß√µes:\*\*\s*([\s\S]*?)(?=\n\*\*|$)/i);
      
      return {
        tipificacao: tipMatch ? tipMatch[1].trim() : 'N√£o identificado',
        fundamentacao: fundMatch ? fundMatch[1].trim() : '',
        tipificacoesAlternativas: tipAltMatch ? tipAltMatch[1].trim() : '',
        tipificacoesDisciplinares: tipDiscMatch ? tipDiscMatch[1].trim() : '',
        dataPrescricao: prescPenalMatch ? prescPenalMatch[1].trim() : '',
        dataPrescricaoAdm: prescAdmMatch ? prescAdmMatch[1].trim() : '',
        competencia: competenciaMatch ? competenciaMatch[1].trim() : '',
        observacoes: obsMatch ? obsMatch[1].trim() : ''
      };
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('Erro ao interpretar tipifica√ß√£o com IA:', error);
      }
      return {
        tipificacao: 'Erro ao interpretar via IA',
        fundamentacao: '',
        tipificacoesAlternativas: '',
        tipificacoesDisciplinares: '',
        dataPrescricao: '',
        dataPrescricaoAdm: '',
        competencia: '',
        observacoes: ''
      };
    }
  }
}; 